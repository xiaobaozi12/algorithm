给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。答案可以按 任意顺序 返回。

给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。

示例 1：
输入：digits = "23"
输出：["ad","ae","af","bd","be","bf","cd","ce","cf"]

示例 2：
输入：digits = ""
输出：[]

示例 3：
输入：digits = "2"
输出：["a","b","c"]
//回溯算法
回溯模版
void backtrack(参数) {
    if (终止条件) {
        存放结果;
        return;
    }

    for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) {
        处理节点;
        backtrack(路径，选择列表); // 递归
        回溯，撤销处理结果
    }
}
//不太熟悉
class Solution {
    public List<String> letterCombinations(String digits) {

        LinkedList<String> linkedList = new LinkedList<>();
        if (digits==null||digits.isEmpty())
            return linkedList;
        char[][] tab = {{'a', 'b', 'c'}, {'d', 'e', 'f'}, {'g', 'h', 'i'},
                {'j', 'k', 'l'}, {'m', 'n', 'o'}, {'p', 'q', 'r', 's'},
                {'t', 'u', 'v'}, {'w', 'x', 'y', 'z'}};
        linkedList.add("");
        while (linkedList.peek().length()!=digits.length()){
            String remove = linkedList.poll();
         char[] chars=   tab[digits.charAt(remove.length()) - '2'];
            for (int i = 0; i < chars.length; i++) {
                linkedList.add(remove+chars[i]);

            }
        }
        return linkedList;

    }
}
