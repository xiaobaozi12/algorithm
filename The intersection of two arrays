 public static int[] intersect(int[] nums1, int[] nums2) {
//双指针法
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        ArrayList<Object> list = new ArrayList<>();
        int p1=0;
        int p2=0;
       while (p1<nums1.length&&p2<nums2.length){
           if (nums1[p1]==nums2[p2]){
               list.add(nums1[p1]);
               p1++;
               p2++;
           }else {
               if (nums1[p1]>nums2[p2]){
                   p2++;
               }else {
                   p1++;
               }
           }
       }
       int[] array =new  int[list.size()];
        for (int i = 0; i < list.size()-1; i++) {
            array[i]= (int) list.get(i);
        }
       return array;
//hash法
//        if (nums1.length>nums2.length){
//            intersect(nums2,nums1);
//        }
//        HashMap<Integer, Integer> map = new HashMap<>();
//        for (int num: nums1) {
//            int i=map.getOrDefault(num,0)+1;
//            map.put(num,i);
//        }
//        int[] ints = new int[nums1.length];
//        int a=0;
//        for (int num3: nums2) {
//            if (map.getOrDefault(num3,0)>0){
//                int j=map.getOrDefault(num3,0)-1;
//                ints[a++]=num3;
//
//                if (j>0){
//                    map.put(num3,j);
//                }else {
//                    map.remove(num3);
//                }
//            }
//
//        }
//        return Arrays.copyOfRange(ints,0,a);
//        给你两个整数数组 nums1 和 nums2 ，请你以数组形式返回两数组的交集。返回结果中每个元素出现的次数，应与元素在两个数组中都出现的次数一致（如果出现次数不一致，则考虑取较小值）。可以不考虑输出结果的顺序。
//
// 
//
//        示例 1：
//
//        输入：nums1 = [1,2,2,1], nums2 = [2,2]
//        输出：[2,2]
//        示例 2:
//
//        输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]
//        输出：[4,9]
// 
//
//        提示：
//
//        1 <= nums1.length, nums2.length <= 1000
//        0 <= nums1[i], nums2[i] <= 1000
// 
//
//        进阶：
//
//        如果给定的数组已经排好序呢？你将如何优化你的算法？
//        如果 nums1 的大小比 nums2 小，哪种方法更优？
//        如果 nums2 的元素存储在磁盘上，内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？
//        相关标签
//
//                Java
//
//
//
//        作者：LeetCode
//        链接：https://leetcode.cn/leetbook/read/top-interview-questions-easy/x2y0c2/
//        来源：力扣（LeetCode）
//        著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
    }
