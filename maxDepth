 public class TreeNode {
     int val;
     TreeNode left;
     TreeNode right;
     TreeNode() {}
     TreeNode(int val) { this.val = val; }
     TreeNode(int val, TreeNode left, TreeNode right) {
         this.val = val;
         this.left = left;
         this.right = right;
     }
 }
 //本方法为递归方法调用，就是先走到最后可空节点然后再向后加，如果左节点的个数多加左节点，右节点同理。
    public int maxDepth(TreeNode root) {
        if (root==null)
            return 0;
        int left =maxDepth(root.left);
        int right =maxDepth(root.right);
        return 1+(left>right?left:right);

    }
 //BFS原理，进行一层层遍历，从上向下走,创建一个队列，每次向下走，如果左右都没有数不加。
 public int maxDepth1(TreeNode root) {
  if (root==null)
      return 0;
     Deque<TreeNode> list = new LinkedList<>();
     list.push(root);
     int count =0;
     while (!list.isEmpty()){
         int size = list.size();
         while (size-- >0){
             TreeNode pop = list.pop();
             if(pop.right!=null)
                 list.addLast(pop.right);
             if(pop.left!=null)
                 list.addLast(pop.left);
         }
         count++;
     }
     return count;
 }
    public int maxDepth3(TreeNode root) {
        if (root == null)
            return 0;
        //创建一个队列
        Deque<TreeNode> deque = new LinkedList<>();
        deque.push(root);
        int count = 0;
        while (!deque.isEmpty()) {
            //每一层的个数
            int size = deque.size();
            while (size-- > 0) {
                TreeNode cur = deque.pop();
                if (cur.left != null)
                    deque.addLast(cur.left);
                if (cur.right != null)
                    deque.addLast(cur.right);
            }
            count++;
        }
        return count;
    }
二叉树的最大深度
给定一个二叉树 root ，返回其最大深度。

二叉树的 最大深度 是指从根节点到最远叶子节点的最长路径上的节点数。
