    TreeNode prv;
    public boolean isValidBST1(TreeNode root){
        if (root==null)
            return true;
        if (!isValidBST(root.left))
            return false;
        if (prv!=null&&prv.val>=root.val){
            return false;
        }

        prv=root;
        if (!isValidBST(root.right)){
            return false;
        }

        return true;
    }
    //另一种遍历方法，循环遍历
    public boolean isValidBST(TreeNode root) {
        if (root == null)
            return true;
        Stack<TreeNode> stack = new Stack<>();
        TreeNode pre = null;
        while (root != null || !stack.isEmpty()) {
            while (root != null) {
                stack.push(root);
                root = root.left;
            }
            root = stack.pop();
            if (pre != null && root.val <= pre.val)
                return false;
            //保存前一个访问的结点
            pre = root;
            root = root.right;
        }
        return true;
    }

验证二叉搜索树
