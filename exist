class Solution {
   public boolean exist(char[][] board, String word) {
    char[] chars = word.toCharArray();
    for (int i = 0; i < board.length; i++) {
        for (int j = 0; j < board[0].length; j++) {
if (dfs(board,chars,i,j,0)){
    return true;
}
        }

    }
    return false;
}
boolean dfs (char[][] board,char[] word,int i,int j,int index){
if (i<0||i>=board.length||j<0||j>=board[0].length||board[i][j]!=word[index]){
    return false;
}
if (index==word.length-1)
    return true;
    char c =board[i][j];
    board[i][j]='.';
    boolean res=dfs(board,word,i+1,j,index+1)
            ||dfs(board,word, i-1,j,index+1)
            ||dfs(board,word,i,j+1,index+1)
            ||dfs(board,word,i,j-1,index+1);
    board[i][j]=c;
    return res;
}
}
//进行递归判断，向岛屿数量一样向四周扩散判断，最后进行限制。
给定一个 m x n 二维字符网格 board 和一个字符串单词 word 。如果 word 存在于网格中，返回 true ；否则，返回 false 。

单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用

输入：board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
输出：true

