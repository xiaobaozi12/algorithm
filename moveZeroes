 public static void moveZeroes(int[] nums) {
        int p=0;

        int point =0;
        int length = nums.length;
        for (int i = 0; i < length; i++) {
            if (nums[i]!=0){
                nums[p++]=nums[i];
                point++;
            }
        }
        for (int i = point; i <nums.length ; i++) {
            nums[i]=0;
        }
    }
    //另一种思路：从前遍历，如果da
//    public void moveZeroes(int[] nums) {
//        int i = 0;//统计前面0的个数
//        for (int j = 0; j < nums.length; j++) {
//            if (nums[j] == 0) {//如果当前数字是0就不操作
//                i++;
//            } else if (i != 0) {
//                //否则，把当前数字放到最前面那个0的位置，如果前面没有0就直接不管
//                //当前位置设为0，
//                nums[j - i] = nums[j];
//                nums[j] = 0;
//            }
//        }
//    }
//    给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。
//
//    请注意 ，必须在不复制数组的情况下原地对数组进行操作。
//
//             
//
//    示例 1:
//
//    输入: nums = [0,1,0,3,12]
//    输出: [1,3,12,0,0]
//    示例 2:
//
//    输入: nums = [0]
//    输出: [0]
//             
//
//    提示:
//
//            1 <= nums.length <= 104
//            -231 <= nums[i] <= 231 - 1
//             
//
//    进阶：你能尽量减少完成的操作次数吗？
//
//    相关标签
//
//            Java
//
//
//
