   public static int[] twoSum(int[] nums, int target) {
//
//        int[]cums1=new int[2];
//        for (int i = 0; i < nums.length; i++) {
//            for (int j = 1; j < nums.length; j++) {
//                if (nums[i]+nums[j]==target&&i!=j){
//                    cums1[0]=nums[i];
//                    cums1[1]=nums[j];
//                    return cums1;
//                }
//
//            }
//
//        }
//        return cums1;
//        int p=0;
//        int p1=1;
//        int maxsize=nums.length-1;
//        while (nums[p]+nums[p1]!=target){
//            if (p1==maxsize){
//                p++;
//                p1=p;
//            }
//            p1++;
//        }
//        return new int[]{p,p1};
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            if (map.get(target-nums[i])!=null){
                return new int[]{map.get(target-nums[i]),i};
            }
            map.put(nums[i],i);

        }
        return new int[]{0,0};
        //暴力遍历法，双指针法和hashmap法
//        给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。
//
//        你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。
//
//        你可以按任意顺序返回答案。
//
// 
//
//        示例 1：
//
//        输入：nums = [2,7,11,15], target = 9
//        输出：[0,1]
//        解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。
//        示例 2：
//
//        输入：nums = [3,2,4], target = 6
//        输出：[1,2]
//        示例 3：
//
//        输入：nums = [3,3], target = 6
//        输出：[0,1]
// 
//
//        提示：
//
//        2 <= nums.length <= 104
//                -109 <= nums[i] <= 109
//                -109 <= target <= 109
//        只会存在一个有效答案
//
//        作者：LeetCode
//        链接：https://leetcode.cn/leetbook/read/top-interview-questions-easy/x2jrse/
//        来源：力扣（LeetCode）
//        著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。  
    }
