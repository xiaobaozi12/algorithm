class MinStack {

    private ListNode head;

    public void push(int val) {
        if (empty())
            head=new ListNode(val,val,null);
        else
            head =new ListNode(val,Math.min(val,head.min),head);

    }

    public void pop() {
if (empty())
    throw new RuntimeException("栈为空");
head=head.next;
    }

    public int top() {
        if (empty())
            throw new RuntimeException("栈为空");
        return head.val;

    }

    public int getMin() {
        if (empty())
            throw new RuntimeException("栈为空");
        return head.min;

    }
    public boolean empty(){
        return head==null;
    }
    class ListNode {
        public int val;
        public int min;//最小值
        public ListNode next;

        public ListNode(int val, int min, ListNode next) {
            this.val = val;
            this.min = min;
            this.next = next;
        }
    }
 
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。

实现 MinStack 类:

MinStack() 初始化堆栈对象。
void push(int val) 将元素val推入堆栈。
void pop() 删除堆栈顶部的元素。
int top() 获取堆栈顶部的元素。
int getMin() 获取堆栈中的最小元素。

进行最小数栈的编辑时，只需要建立一个头节点记录了最小数的节点即可。每次添加时进行判断，如是是第一位就直接放入，不是第一位，和头节点的最小位比较，放入最小的即可。
