给定单链表的头节点 head ，将所有索引为奇数的节点和索引为偶数的节点分别组合在一起，然后返回重新排序的列表。

第一个节点的索引被认为是 奇数 ， 第二个节点的索引为 偶数 ，以此类推。

请注意，偶数组和奇数组内部的相对顺序应该与输入时保持一致。

你必须在 O(1) 的额外空间复杂度和 O(n) 的时间复杂度下解决这个问题。
输入: head = [1,2,3,4,5]
输出: [1,3,5,2,4]
输入: head = [2,1,3,5,6,4,7]
输出: [2,3,6,7,1,5,4]


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
 public ListNode oddEvenList(ListNode head) {
        if(head==null||head.next==null)
            return head;

        ListNode odd=head;
        ListNode oddCur =odd;

        ListNode even=head.next;
        ListNode evenCur=even;
        while(evenCur!=null&&evenCur.next!=null){
           
            oddCur.next=oddCur.next.next;
            evenCur.next=evenCur.next.next;
            oddCur=oddCur.next;
            evenCur=evenCur.next;
        }
        oddCur.next=even;
        return odd;

    }
}
//根据题意，存储第一个奇数偶数节点，之后进行遍历，遍历后将奇数的头节点放到偶数节点的后面。
