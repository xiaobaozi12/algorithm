    public int singleNumber(int[] nums) {
//        if (nums.length==1){
//    return nums[0];
//    }
//
//
//        Arrays.sort(nums);
//        for (int i = 1; i < nums.length-1; i++) {
//            if (nums[i]!=nums[i-1]&&nums[i]!=nums[i+1]){
//                return nums[i];
//            }
//
//        }
//        if (nums[nums.length-1]!=nums[nums.length-2]){
//            return nums[nums.length-1];
//        }
//        if (nums[0]!=nums[1]){
//           return nums[0];
//        }
//        return 1;
        int result=0;
        for (int num:nums) {
            result ^= num;

        }
        return result;//进行异或操作，0^0=0 0^n=n 这题例如：1^1^2^2^3=3找到但个数3
//        给你一个 非空 整数数组 nums ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。
//
//        你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间。
//
// 
//
//        示例 1 ：
//
//        输入：nums = [2,2,1]
//        输出：1
//        示例 2 ：
//
//        输入：nums = [4,1,2,1,2]
//        输出：4
//        示例 3 ：
//
//        输入：nums = [1]
//        输出：1
// 
//
//        提示：
//
//        1 <= nums.length <= 3 * 104
//                -3 * 104 <= nums[i] <= 3 * 104
//        除了某个元素只出现一次以外，其余每个元素均出现两次。
//
//        作者：LeetCode
//        链接：https://leetcode.cn/leetbook/read/top-interview-questions-easy/x21ib6/
//        来源：力扣（LeetCode）
//        著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
    }
