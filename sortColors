public void sortColors(int[] nums) {
    int left=0;
    int right=nums.length-1;
    int index=0;
    while (index<=right){
        if (nums[index]==0){
            swap(nums,left++,index++);
        }
        else if (nums[index]==1){
            index++;
        }
        else if (nums[index]==2){
            swap(nums,right--,index);
        }
    }

}
public void swap(int[] ints,int left,int index){
    int i = ints[left];
    ints[left]=ints[index];
    ints[index]=i;
}
//三指针法，index小于right之后每次进行判断交换
给定一个包含红色、白色和蓝色、共 n 个元素的数组 nums ，原地 对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。

我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。

必须在不使用库内置的 sort 函数的情况下解决这个问题。

输入：nums = [2,0,2,1,1,0]
输出：[0,0,1,1,2,2]
