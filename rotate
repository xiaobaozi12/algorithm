 public void rotate(int[][] matrix) {
        int length =matrix.length;
//        for (int i = 0; i < length/2; i++) {
//            for (int j = 0; j < length; j++) {
//                int a;
//                a=matrix[i][j];
//                matrix[i][j]=matrix[length-i][j];
//                matrix[length-i][j]=a;
//            }
//        }
//        for (int i = 0; i <length; i++) {
//            for (int j = i+1; j <length ; j++) {
//                int b =matrix[i][j];
//                matrix[i][j]=matrix[j][i];
//                matrix[j][i]=b;
//            }
//
//        }
//    }

        for (int i = 0; i < length/2; i++) {
            for (int j = i; j <length-i-1 ; j++) {
                int p =matrix[i][j];
                matrix[i][j]=matrix[length-j-1][i];
                matrix[length-j-1][i]=matrix[length-i-1][length-j-1];
                matrix[length-i-1][length-j-1]=matrix[j][length-i-1];
                matrix[j][length-i-1]=p;
            }
        }
        //两种方法：一种是旋转法，一种是暴力破解法：旋转法是上下旋转在进行对角线旋转，暴力破解是四个角上的四个数字全部旋转（其它唯一同理·）
//        旋转图像
//        给定一个 n × n 的二维矩阵 matrix 表示一个图像。请你将图像顺时针旋转 90 度。
//
//        你必须在 原地 旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要 使用另一个矩阵来旋转图像。
//
// 
//
//        示例 1：
//
//
//        输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]
//        输出：[[7,4,1],[8,5,2],[9,6,3]]
//        示例 2：
//
//
//        输入：matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
//        输出：[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]
// 
//
//        提示：
//
//        n == matrix.length == matrix[i].length
//        1 <= n <= 20
//                -1000 <= matrix[i][j] <= 1000

        }
